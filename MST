#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Memo
circular_layout(G[, dim, scale])	Position nodes on a circle.
random_layout(G[, dim])	Position nodes uniformly at random in the unit square.
shell_layout(G[, nlist, dim, scale])	Position nodes in concentric circles.
spring_layout(G[, dim, k, pos, fixed, ...])	Position nodes using Fruchterman-Reingold force-directed algorithm.
spectral_layout(G[, dim, weight, scale])	Position nodes using the eigenvectors of the graph Laplacian.
"""

def Out_MST(matrix,label_name,node_color = 'royalblue',node_size=300,savefig=None):
    """
    Create Heat map (useful for correlation matrix)
    
    Parameters
    ----------
    matrix: array_like or sparse matrix, 2 dimensions
    label_name: data label according to matrix contents
    savefig:
     """    
    MST = minimum_spanning_tree(matrix)
    G = nx.Graph(MST)
    
    plt.figure(figsize=(10,10))
    pos = nx.spring_layout(G)
    nx.draw_networkx(G,pos, with_labels = False,node_color = node_color,\
                                                         node_size=node_size)
    for k in pos:
        value = pos[k]
        plt.text(value[0],value[1], label_name[k])
    plt.axis("off")
    plt.show()
    if savefig != None:
        plt.savefig(savefig)
    plt.show()  

    return 
